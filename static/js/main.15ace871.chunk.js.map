{"version":3,"sources":["avatar.png","UsersList.js","MessageBox.js","MonetizationOff.js","MoneyViewer.js","Chat.js","Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pointers","UsersList","document","monetization","addEventListener","this","handleMoney","removeEventListener","event","e","detail","scale","assetScale","total","paymentPointer","amount","Math","pow","props","users","toggleConnection","connectedTo","connecting","platform","platformAmount","toFixed","Grid","Column","width","Card","fluid","Content","header","textAlign","length","List","divided","verticalAlign","size","map","user","userPaid","pointer","userAmount","Item","key","userName","floated","Button","onClick","disabled","loading","Modal","trigger","Image","avatar","src","Header","image","wrapped","Description","JSON","stringify","Segment","React","Component","MessageBox","messages","message","setMessage","sendMsg","me","Sticky","Message","warning","Comment","Group","sender","text","time","Avatar","Author","Label","pointing","Metadata","formatRelative","Date","Text","placeholder","icon","Icon","name","Form","Input","type","value","onChange","target","action","color","MonetizationOff","isMonetized","useContent","href","rel","MoneyViewer","Chat","connection","updateConnection","updateChannel","channel","useState","socketOpen","setSocketOpen","socketMessages","setSocketMessages","isLoggedIn","setIsLoggedIn","setMe","setPaymentPointer","loggingIn","setLoggingIn","setUsers","setConnectedTo","setConnecting","alert","setAlert","connectedRef","useRef","messagesRef","setMessages","client","onConnect","current","subscribe","console","log","onMessageArrived","payloadString","data","parse","prev","useEffect","clientID","parseInt","random","Paho","Client","Number","connect","useSSL","port","password","onSuccess","pop","onLogin","updateUsersList","send","removeUser","onOffer","onAnswer","error","onCandidate","onChannelMessage","closeAlert","publish","handleDataChannelMessageReceived","paidAmount","filter","u","recipient","peer","peerMessages","newMessages","Object","assign","success","loggedIn","title","timeout","onConfirm","onCancel","localConnection","RTCPeerConnection","ondatachannel","receiveChannel","onopen","onmessage","confirmBtnBsStyle","offerMessage","answer","localDescription","payTo","querySelector","setAttribute","candidate","className","as","centered","columns","Field","iconPosition","autoFocus","raised","dataChannel","createDataChannel","onerror","createOffer","then","offer","setLocalDescription","catch","handleConnectToPeer","format","Loader","active","inline","Container","ConnectionConsumer","ChannelConsumer","ConnectionContext","createContext","ChannelContext","Consumer","App","setconnection","setChannel","Provider","conn","chn","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15ace871.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.315cf354.png\";","// Displays list of users on the left\nimport React from \"react\";\nimport {\n  Grid,\n  Segment,\n  Card,\n  List,\n  Button,\n  Image,\n  Modal,\n  Header\n} from \"semantic-ui-react\";\n\nconst pointers = {}\nconst platformPointer = \"$coil.xrptipbot.com/da75ae04-5c0c-4662-8ce6-5470a4127d97\"\n\nclass UsersList extends React.Component {\n  componentDidMount() {\n    document.monetization.addEventListener('monetizationprogress', this.handleMoney);\n  }\n  \n  componentWillUnmount() {\n    document.monetization.removeEventListener('monetizationprogress', this.handleMoney);\n  }\n\n  handleMoney (event) {\n    const e = event.detail\n    const scale = e.assetScale\n    let total = pointers[e.paymentPointer]\n    if (!total) total = 0\n    const delta = (e.amount * Math.pow(10, -scale)) //.toFixed(scale)\n    total += delta\n    //console.log(total)\n    pointers[e.paymentPointer] = total\n  }\n\n  render() {\n    const { users, toggleConnection, connectedTo, connecting } = this.props\n    const platform = pointers[platformPointer]\n    const platformAmount = platform ? platform.toFixed(9) : 0\n    //console.log(pointers)\n    return (\n    <Grid.Column width={5}>\n      Platform ${platformAmount}\n      <Card fluid>\n        <Card.Content header=\"Online Users\" />\n        <Card.Content textAlign=\"left\">\n          {(users.length && (\n            <List divided verticalAlign=\"middle\" size=\"large\">\n              {users.map((user) => {\n                //console.log(user)\n                const userPaid = pointers[user.pointer]\n                const userAmount = userPaid ? userPaid.toFixed(9) : 0\n                return (\n                <List.Item key={user.userName}>\n                  <List.Content floated=\"right\">\n                    <Button\n                      onClick={() => {\n                        toggleConnection(user.userName);\n                      }}\n                      disabled={!!connectedTo && connectedTo !== user.userName}\n                      loading={connectedTo === user.userName && connecting}\n                    >\n                      {connectedTo === user.userName ? \"Disconnect\" : \"Connect\"}\n                    </Button>\n                  </List.Content>\n                  <Modal trigger={<Image avatar src={user.avatar} />}>\n    <Modal.Header>A Money Chat User</Modal.Header>\n    <Modal.Content image>\n      <Image wrapped size='medium' src={user.avatar} />\n      <Modal.Description>\n        <Header>{user.userName}</Header>\n        <p>\n          Payment Pointer: {user.pointer}\n        </p>\n        <p>\n          Amount you have paid to this user: {userAmount}\n        </p>\n        <p>\n          {JSON.stringify(user,null,2)}\n        </p>\n      </Modal.Description>\n    </Modal.Content>\n  </Modal>\n                  <List.Content>\n                    <List.Header>{user.userName} ${userAmount}</List.Header>\n                  </List.Content>\n                </List.Item>\n              )})\n              }\n            </List>\n          )) || <Segment>There are no users Online</Segment>}\n        </Card.Content>\n      </Card>\n    </Grid.Column>\n  )\n}\n}\n\nexport default UsersList;\n","// This is the message area\nimport React from \"react\";\nimport {\n  Header,\n  Icon,\n  Input,\n  Grid,\n  Segment,\n  Card,\n  Sticky,\n  Button,\n  Comment,\n  Form,\n  Label,\n  Message\n} from \"semantic-ui-react\";\nimport { formatRelative } from \"date-fns\";\nimport avatar from \"./avatar.png\";\n\nconst MessageBox = ({ messages, connectedTo, message, setMessage, sendMsg, me }) => {\n  return (\n    <Grid.Column width={11}>\n      <Sticky>\n        <Message warning>\n          <Message.Header>Nothing here is private! All messages are sent to everyone on this site.</Message.Header>\n        </Message>\n        <Card fluid>\n          <Card.Content\n            header={\n              !!connectedTo ? connectedTo : \"Not chatting with anyone currently\"\n            }\n          />\n          <Card.Content>\n            {!!connectedTo && messages[connectedTo] ? (\n              <Comment.Group>\n                {messages[connectedTo].map(({ sender, message: text, time }) => (\n                  <Comment key={`msg-${sender}-${time}`}>\n                    <Comment.Avatar src={avatar} />\n                    <Comment.Content>\n                      <Comment.Author><Label pointing={sender === me ? 'right' : 'left'}>{sender === me ? 'Me' : sender}</Label></Comment.Author>\n                      <Comment.Metadata>\n                        <span>\n                          {formatRelative(new Date(time), new Date())}\n                        </span>\n                      </Comment.Metadata>\n                <Comment.Text>{text}</Comment.Text>\n                    </Comment.Content>\n                  </Comment>\n                ))}\n              </Comment.Group>\n            ) : (\n              <Segment placeholder>\n                <Header icon>\n                  <Icon name=\"discussions\" />\n                  No messages available yet\n                </Header>\n              </Segment>\n            )}\n            <Form>\n            <Input\n              fluid\n              type=\"text\"\n              value={message}\n              onChange={e => setMessage(e.target.value)}\n              placeholder=\"Type message\"\n              action\n            >\n              <input />\n              <Button color=\"teal\" disabled={!message} onClick={sendMsg}>\n                <Icon name=\"send\" />\n                Send Message\n              </Button>\n            </Input>\n            </Form>\n          </Card.Content>\n        </Card>\n      </Sticky>\n    </Grid.Column>\n  );\n};\n\nexport default MessageBox;\n","import React, { Fragment } from \"react\"\nimport { useContent } from 'react-monetize'\n\nfunction MonetizationOff() {\n    const { isMonetized } = useContent()\n    // console.log(\"isMonetized\",isMonetized)\n    // console.log(\"isLoading\", isLoading)\n    return (\n        <Fragment>\n        {\n            !isMonetized ? \n            <div>\n                You do not have monetization enabled.\n                To get the full experience please \n                <a href=\"https://webmonetization.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">Get Started!</a>\n            </div>\n            : \n            <div>Monetization Enabled. Thanks for your support!</div>\n        }\n      </Fragment>\n    )\n}\n\nexport default MonetizationOff;\n","import React from \"react\";\nimport { useStatus } from 'react-monetize';\n\nfunction MoneyViewer() {\n    const { state, events } = useStatus()\n\n    return (\n        <>\n            <p>State: {state}</p>\n            <ul>\n                {events.map((e) => (\n                    <li key={e.timeStamp}>{`${e.detail.amount} ${e.detail.assetCode}/${e.detail.assetScale} ${JSON.stringify(e.detail)}`}</li>\n                ))}\n            </ul>\n        </>\n    );\n}\n\nexport default MoneyViewer;","import React, \n  { Fragment, \n    useState, useEffect, useRef } from \"react\";\nimport {\n  Header,\n  Icon,\n  Input,\n  Grid,\n  Segment,\n  Button,\n  Loader,\n  Form,\n  Label,\n} from \"semantic-ui-react\";\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport { format } from \"date-fns\";\nimport \"./App.css\";\nimport UsersList from \"./UsersList\";\nimport MessageBox from \"./MessageBox\";\nimport Paho from \"paho-mqtt\"\nimport MonetizationOff from './MonetizationOff'\nimport MoneyViewer from \"./MoneyViewer\";\n\nconst platformPointer = \"$coil.xrptipbot.com/da75ae04-5c0c-4662-8ce6-5470a4127d97\"\n// Use for local connections\nconst configuration = null;\n\nconst Chat = ({ connection, updateConnection, channel, updateChannel }) => {\n  const [socketOpen, setSocketOpen] = useState(false);\n  const [socketMessages, setSocketMessages] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [me, setMe] = useState(\"\");\n  const [paymentPointer, setPaymentPointer] = useState(platformPointer);\n  const [loggingIn, setLoggingIn] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [connectedTo, setConnectedTo] = useState(\"\");\n  const [connecting, setConnecting] = useState(false);\n  const [alert, setAlert] = useState(null);\n  //const [activeItem, setActiveItem] = useState(null);\n  const connectedRef = useRef();\n  const [message, setMessage] = useState(\"\");\n  const messagesRef = useRef({});\n  const [messages, setMessages] = useState({});\n\n  const client = useRef(null)\n\n  useEffect(() => {\n    const clientID = \"bot-demo-ws-\" + parseInt(Math.random() * 100);\n    const host = \"mqtt.bitcoinofthings.com\"\n    const port = \"8884\"\n    const isSSL = true\n    const usessl = (isSSL && port === \"8884\")\n    const username = \"demo\"\n    const password = \"demo\"\n    client.current = new Paho.Client(host, Number(port), clientID)\n    // Set callback handlers\n    //client.onConnectionLost = onConnectionLost\n    client.current.onMessageArrived = onMessageArrived\n    client.current.connect({ \n      useSSL: usessl,\n      userName: username,\n      password: password,\n      onSuccess: onConnect\n    })\n\n  }, []);\n\n  // Called when the client connects\nfunction onConnect() {\n  setSocketOpen(true);\n  client.current.subscribe(\"demo\");\n  console.log(\"subscribed to demo topic\")\n}\n\n// Called when a message arrives on mqtt topic\nfunction onMessageArrived(message) {\n  console.log(\"onMessageArrived: \" + message.payloadString);\n  const data = JSON.parse(message.payloadString)\n  setSocketMessages(prev => [...prev, data])\n}\n\n  useEffect(() => {\n    let data = socketMessages.pop();\n    if (data) {\n      console.log(data)\n      switch (data.type) {\n        case \"connect\":\n          setSocketOpen(true);\n          break\n        case \"login\":\n          // we sent the login message\n          if (data.name === me) onLogin(data)\n          else {\n            // someone else logged in. add to our list of users\n            updateUsersList(data.users[0])\n            // broadcast ourselves so that new user sees us\n            if (me) {\n              send({ type: \"updateUsers\",\n                key: me,\n                userName: me,\n                pointer: paymentPointer\n              })\n            }\n          }\n          break\n        case \"updateUsers\":\n          updateUsersList(data);\n          break\n        case \"removeUser\":\n          removeUser(data)\n          break\n        case \"offer\":\n          onOffer(data)\n          break\n        case \"answer\":\n          if (!data.sender) {\n            console.error('INVALID answer message')\n          } else {\n            onAnswer(data)\n          }\n          break\n        case \"candidate\":\n          onCandidate(data);\n          break\n        case \"channelMessage\":\n          onChannelMessage(data);\n          break\n        default:\n          console.log(`${data.type} type not handled in switch`)\n          console.log(data)\n          break\n      }\n    }\n  }, [socketMessages]);\n\n  const closeAlert = () => {\n    setAlert(null);\n  };\n\n  const send = data => {\n    client.current.publish(\"demo\",JSON.stringify(data))\n  }\n\n  //was { data }\n  const onChannelMessage = (data) => {\n    handleDataChannelMessageReceived(data)\n  }\n\n  const handleLogin = () => {\n    setLoggingIn(true);\n    send({ type: \"login\",\n      name: me,\n      success: true,\n      message:\"I just logged in\",\n      users: [{key:me, userName: me, pointer: paymentPointer}]\n    });\n  };\n\n  const updateUsersList = (user) => {\n    removeUser(user)\n    user.avatar = `https://avatars.dicebear.com/api/human/${user.userName}.svg`\n    user.paidAmount = 0.00\n    setUsers(prev => [...prev, user]);\n  };\n\n  const removeUser = (user) => {\n    setUsers(prev => prev.filter(u => u.userName !== user.userName));\n  }\n\n  //message received from user in channel\n  const handleDataChannelMessageReceived = (data) => {\n    //todo: group messages are also sent here\n    if (!(data.recipient === me || data.sender === me)) return\n    const message = data\n    const sender = message.sender\n    const recipient = message.recipient\n    const peer = (sender === me) ? recipient : sender\n    // list of conversations we have had\n    let conversations = messagesRef.current\n    let peerMessages = conversations[peer]\n    if (peerMessages) {\n      peerMessages = [...peerMessages, message]\n      let newMessages = Object.assign({}, messages, { [peer]: peerMessages })\n      messagesRef.current = newMessages\n      setMessages(newMessages)\n    } else {\n      peerMessages = { [peer]: [message] }\n      let newMessages = Object.assign({}, messages, peerMessages)\n      messagesRef.current = newMessages\n      setMessages(newMessages)\n    }\n  }\n\n  const onLogin = ({ success, message, users: loggedIn }) => {\n    setLoggingIn(false)\n    if (success) {\n      setAlert(\n        <SweetAlert\n          success\n          title={`Hello ${me}`}\n          timeout={3000}\n          onConfirm={closeAlert}\n          onCancel={closeAlert}\n        >\n          Logged in successfully!\n        </SweetAlert>\n      )\n      setIsLoggedIn(true)\n      updateUsersList(loggedIn[0])\n\n      let localConnection = new RTCPeerConnection(configuration);\n      localConnection.ondatachannel = event => {\n        console.log(\"Data channel is created!\");\n        let receiveChannel = event.channel;\n        receiveChannel.onopen = () => {\n          console.log(\"Data channel is open and ready to be used.\");\n        };\n        receiveChannel.onmessage = handleDataChannelMessageReceived;\n        updateChannel(receiveChannel);\n      };\n      updateConnection(localConnection);\n    } else {\n      setAlert(\n        <SweetAlert\n          warning\n          confirmBtnBsStyle=\"danger\"\n          title=\"Failed\"\n          onConfirm={closeAlert}\n          onCancel={closeAlert}\n        >\n          {message}\n        </SweetAlert>\n      );\n    }\n  };\n\n  //when somebody wants to connect to us\n  const onOffer = (offerMessage) => {\n    if (offerMessage.peer !== me) return\n    setConnectedTo(offerMessage.sender);\n    connectedRef.current = offerMessage.sender;\n    send({ type: \"answer\", \n      answer: connection.localDescription, \n      sender: me,\n      pointer: paymentPointer,\n      peer: offerMessage.sender \n    })\n  }\n\n  const payTo = (pointer) => {\n    document.querySelector('meta[name=\"monetization\"]').setAttribute(\"content\", pointer)\n    console.log(`Now paying to ${pointer}`)\n}\n\n  //when a peer answers our offer\n  const onAnswer = (answer) => {\n    if (answer.sender === me) {\n      console.log(`You accepted the offer. Now connected to ${answer.peer}`)\n      if (!answer.pointer) {\n        console.error(`You not have a pointer.`)\n      }\n    }\n    if (answer.peer === me) {\n      console.log(`Your offer was accepted. You are now connected to ${answer.sender}`)\n      if (answer.pointer) {\n        payTo(answer.pointer)\n      } else {\n        console.error(`${answer.sender} does not have a pointer`)\n      }\n    }\n  }\n\n  const onCandidate = ({ candidate }) => {\n    console.log('we dont do ice candidates')\n  }\n\n  //when a user clicks the send message button\n  const sendMsg = () => {\n    const time = format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n    let connectedTo = connectedRef.current\n    let messageEntity = { type:\"channelMessage\", time, message, \n      sender: me, recipient: connectedTo || \"group\" }\n    send(messageEntity)\n    setMessage(\"\")\n  };\n\n  //connect to a peer with offer\n  const handleConnectToPeer = peer => {\n    let dataChannel = connection.createDataChannel(\"messenger\");\n\n    dataChannel.onerror = error => {\n      setAlert(\n        <SweetAlert\n          warning\n          confirmBtnBsStyle=\"danger\"\n          title=\"Failed\"\n          onConfirm={closeAlert}\n          onCancel={closeAlert}\n        >\n          An error has occurred.\n        </SweetAlert>\n      );\n    };\n\n    dataChannel.onmessage = handleDataChannelMessageReceived;\n    updateChannel(dataChannel);\n\n    connection\n      .createOffer()\n      .then(offer => connection.setLocalDescription(offer))\n      .then(() =>\n        send({ type: \"offer\", offer: connection.localDescription, sender: me, peer })\n      )\n      .catch(e =>\n        setAlert(\n          <SweetAlert\n            warning\n            confirmBtnBsStyle=\"danger\"\n            title=\"Failed\"\n            onConfirm={closeAlert}\n            onCancel={closeAlert}\n          >\n            An error has occurred.\n          </SweetAlert>\n        )\n      )\n  }\n\n  const toggleConnectToPeer = userName => {\n    if (connectedRef.current === userName) {\n      setConnecting(true);\n      setConnectedTo(\"\");\n      payTo(platformPointer)\n      connectedRef.current = \"\";\n      setConnecting(false);\n    } else {\n      setConnecting(true);\n      setConnectedTo(userName);\n      connectedRef.current = userName;\n      handleConnectToPeer(userName);\n      setConnecting(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"align-left\">\n        <Icon name=\"github\">\n          <a href=\"https://github.com/dfoderick/money-chat/\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n        </Icon>\n      </div>\n      {alert}\n      <Header as=\"h2\" icon>\n        <Icon name=\"users\" />\n        <a href=\"https://webmonetization.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">Web Monetization</a> Chat\n      </Header>\n      <MonetizationOff/>\n      {(socketOpen && (\n        <Fragment>\n          <Grid centered columns={2}>\n            <Grid.Column>\n              {(!isLoggedIn && (\n                <>\n                <Form>\n                <Form.Field>\n                <Label pointing=\"below\">Username is your chat alias (authentication not enabled yet)</Label>\n                <Input icon='user' iconPosition='left'\n                  disabled={loggingIn}\n                  type=\"text\"\n                  onChange={e => setMe(e.target.value)}\n                  placeholder=\"Username...\"\n                  action\n                  autoFocus\n                >\n                </Input>\n                </Form.Field>\n                <Form.Field>\n                <Label pointing=\"below\"><a href=\"https://paymentpointers.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Payment Pointer</a> is your (optional) wallet address where you get paid when you chat. Default is platform for testing.</Label>\n                <Input icon='dollar' iconPosition='left'\n                  value = {paymentPointer}\n                  disabled={loggingIn}\n                  type=\"text\"\n                  onChange={e => setPaymentPointer(e.target.value)}\n                  placeholder=\"Payment Pointer\"\n                  action\n                >\n                </Input>\n                </Form.Field>\n                <Button\n                    color=\"teal\"\n                    disabled={!me || loggingIn}\n                    onClick={handleLogin}\n                  >\n                    <Icon name=\"sign-in\" />\n                    Login\n                  </Button>\n                </Form>\n                </>\n              )) || (\n                <Segment raised textAlign=\"center\" color=\"olive\">\n                  Logged In as: {me} {paymentPointer}\n                </Segment>\n              )}\n            </Grid.Column>\n          </Grid>\n          <Grid>\n            <UsersList\n              users={users}\n              toggleConnection={toggleConnectToPeer}\n              connectedTo={connectedTo}\n              connection={connecting}\n            />\n            <MessageBox\n              messages={messages}\n              connectedTo={connectedTo}\n              message={message}\n              setMessage={setMessage}\n              sendMsg={sendMsg}\n              me={me}\n            />\n          </Grid>\n        </Fragment>\n      )) || (\n        <Loader size=\"massive\" active inline=\"centered\">\n          Connecting to messaging service...\n        </Loader>\n      )}\n      {/* <MoneyViewer/> */}\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport Chat from \"./Chat\";\nimport { ConnectionConsumer, ChannelConsumer} from \"./App\";\n\nconst Container = () => {\n  return (\n    <ConnectionConsumer>\n      {({ connection, updateConnection }) => (\n        <ChannelConsumer>\n          {({ channel, updateChannel }) => (\n            <Chat\n              connection={connection}\n              updateConnection={updateConnection}\n              channel={channel}\n              updateChannel={updateChannel}\n            />\n          )}\n        </ChannelConsumer>\n      )}\n    </ConnectionConsumer>\n  );\n};\n\nexport default Container","import React, { useState, createContext } from \"react\";\nimport Container from \"./Container\";\nimport { MonetizeProvider } from 'react-monetize'\n\nconst ConnectionContext = createContext({\n  connection: null,\n  updateConnection: () => {}\n});\nconst ChannelContext = createContext({\n  channel: null,\n  updateChannel: () => {}\n});\n\nconst App = () => {\n  const [connection, setconnection] = useState(null);\n  const [channel, setChannel] = useState(null);\n  const updateConnection = conn => {\n    setconnection(conn);\n  };\n  const updateChannel = chn => {\n    setChannel(chn);\n  };\n  return (\n    <ConnectionContext.Provider value={{ connection, updateConnection }}>\n      <ChannelContext.Provider value={{ channel, updateChannel }}>\n      <MonetizeProvider paymentPointer=\"$coil.xrptipbot.com/da75ae04-5c0c-4662-8ce6-5470a4127d97\">\n        <Container />\n      </MonetizeProvider>\n      </ChannelContext.Provider>\n    </ConnectionContext.Provider>\n  );\n};\n\nexport const ConnectionConsumer = ConnectionContext.Consumer\nexport const ChannelConsumer = ChannelContext.Consumer\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'semantic-ui-css/semantic.min.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}